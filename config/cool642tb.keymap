#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6
#define ZMK_POINTING_DEFAULT_SCRL_VAL 80

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&lt {
};

/ {
    combos {
        compatible = "zmk,combos";

        comb1 {
            bindings = <&kp TAB>;
            key-positions = <0 1>;
        };

        comb3 {
            bindings = <&kp LS(INT1)>;
            key-positions = <32 33>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <20 19>;
        };

        qwerty {
            bindings = <&to 0>;
            key-positions = <0 4 26 22>;
        };

        o24 {
            bindings = <&to 1>;
            key-positions = <5 9 33 29>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        bracket1: bracket1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(N8) &kp LS(N9) &kp LEFT>;
            label = "BRACKET1";
        };

        bracket2: bracket2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(RBKT) &kp LS(BACKSLASH) &kp LEFT>;
            label = "BRACKET2";
        };

        bracket3: bracket3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_BRACKET &kp BACKSLASH &kp LEFT>;
            label = "BRACKET3";
        };

        alt_tab_hold: alt_tab_hold {
            compatible = "zmk,behavior-macro";
            label = "ALT_TAB_HOLD";
            #binding-cells = <0>;
            bindings = <&macro_press &kp LALT>      // ALTキーを押下状態にする
                     , <&macro_tap &kp TAB>         // TABキーをタップ
                     , <&macro_pause_for_release>   // キーが離されるまで待機
                     , <&macro_release &kp LALT>;   // ALTキーを解除
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        encoder_msc_up_down: encoder_msc_up_down {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_UP_DOWN";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_UP>, <&msc SCRL_DOWN>;

            tap-ms = <20>;
        };

        encoder_msc_left_right: encoder_msc_left_right {
            compatible = "zmk,behavior-sensor-rotate";
            label = "ENCODER_MSC_LEFT_RIGHT";
            #sensor-binding-cells = <0>;
            bindings = <&msc SCRL_LEFT>, <&msc SCRL_RIGHT>;

            tap-ms = <20>;
        } ;

        rot_kp: sensor_rotate_kp {
            compatible = "zmk,behavior-sensor-rotate-var";
            #sensor-binding-cells = <2>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                 &kp T                                   &kp Y        &kp U  &kp I      &kp O       &kp P
&kp A             &kp S         &kp D         &kp F                 &kp G        &none       &kp MINUS      &kp H        &kp J  &kp K      &kp L       &kp ENTER
&mt LEFT_SHIFT Z  &kp X         &kp C         &kp V                 &kp B        &kp LS(N8)  &kp LS(N9)     &kp N        &kp M  &kp COMMA  &kp PERIOD  &mt LSHIFT SLASH
&kp LEFT_CONTROL  &kp LEFT_GUI  &kp LEFT_ALT  &mt LEFT_SHIFT LANG2  &lt 2 SPACE  &lt 4 DEL   &kp BACKSPACE  &lt 3 LANG1                                &mo 6
            >;

            sensor-bindings = <&encoder_msc_up_down>;
        };

        Oonishi {
            bindings = <
&kp Q      &kp L         &kp U         &kp F                 &kp COMMA                               &kp PERIOD   &kp W  &kp R  &kp Y  &kp P
&kp E      &kp I         &kp A         &kp O                 &kp MINUS    &none       &kp SLASH      &kp K        &kp T  &kp N  &kp S  &kp H
&kp Z      &kp X         &kp C         &kp V                 &kp B        &kp LS(N8)  &kp LS(N9)     &kp G        &kp D  &kp M  &kp J  &kp B
&kp LCTRL  &kp LEFT_GUI  &kp LEFT_ALT  &mt LEFT_SHIFT LANG2  &lt 2 SPACE  &lt 4 DEL   &kp BACKSPACE  &lt 3 LANG1                       &kp ENTER
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        Symbol+Mouse {
            bindings = <
&kp ESC    &kp LS(SEMI)          &kp LS(SQT)  &kp LS(N5)               &kp LS(NUMBER_3)                 &mkp MB5  &kp INT1   &kp LS(EQUAL)  &kp LEFT_BRACKET  &kp MINUS
&kp EQUAL  &kp LS(N1)            &kp LS(N6)   &kp LS(INTERNATIONAL_3)  &kp LS(N4)        &none   &none  &mkp MB4  &mkp LCLK  &mo 4          &mkp RCLK         &kp SINGLE_QUOTE
&kp LSHFT  &kp LS(LEFT_BRACKET)  &kp LS(N7)   &kp LS(N2)               &none             &none   &none  &none     &kp PG_UP  &mkp MB3       &kp PG_DN         &kp SEMI
&trans     &trans                &trans       &trans                   &trans            &trans  &to 0  &trans                                                &kp INT3
            >;

            sensor-bindings = <&encoder_msc_left_right>;
        };

        Bracket+Cursor {
            bindings = <
&alt_tab_hold     &kp LG(UP_ARROW)  &kp LS(N8)             &kp LS(N9)         &bracket1                &kp LS(LG(S))     &kp LC(PAGE_UP)  &none         &kp LC(PAGE_DOWN)  &kp LG(Z)
&kp LG(LEFT)    &kp LG(RIGHT)     &kp LS(RIGHT_BRACKET)  &kp LS(BACKSLASH)  &bracket2  &none  &none  &kp LG(LS(LEFT))  &mkp LCLK        &kp UP_ARROW  &mkp RCLK          &kp LG(LS(RIGHT))
&kp LEFT_SHIFT  &kp LG(DOWN)      &kp RIGHT_BRACKET      &kp BACKSLASH      &bracket3  &none  &none  &kp HOME          &kp LEFT         &kp DOWN      &kp RIGHT          &kp END
&trans          &trans            &trans                 &none              &none      &none  &to 2  &trans                                                              &none
            >;

            sensor-bindings = <&rot_kp LEFT RIGHT>;
        };

        Func+Num {
            bindings = <
&kp F1          &kp F2  &kp F3  &kp F4   &kp F5                         &kp LS(MINUS)  &kp N1  &kp N2  &kp N3  &kp TAB
&kp F6          &kp F7  &kp F8  &kp F9   &kp F10  &none  &none          &kp PERIOD     &kp N4  &kp N5  &kp N6  &kp ENTER
&kp LEFT_SHIFT  &to 5   &none   &kp F11  &kp F12  &none  &none          &kp N0         &kp N7  &kp N8  &kp N9  &none
&trans          &trans  &trans  &none    &none    &none  &kp BACKSPACE  &none                                  &none
            >;

            sensor-bindings = <&rot_kp LC(MINUS) LC(LS(SEMI))>;
        };

        Settings {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                &none  &none  &none  &none  &none
&none         &none         &none         &none         &none         &none  &none  &none  &none  &none  &none  &none
&none         &none         &none         &none         &none         &none  &none  &none  &none  &none  &none  &none
&none         &none         &none         &none         &none         &none  &none  &none                       &none
            >;
        };

        layer_6 {
            bindings = <
&kp Q       &kp W      &kp E     &kp R     &kp T                        &kp Y        &kp U  &kp I      &kp O       &kp P
&kp A       &kp S      &kp D     &kp F     &kp G        &kp N1  &kp N2  &kp H        &kp J  &kp K      &kp L       &kp ENTER
&kp Z       &kp X      &kp C     &kp V     &kp B        &kp N3  &kp N4  &kp N        &kp M  &kp COMMA  &kp PERIOD  &kp SLASH
&kp RSHIFT  &kp LCTRL  &kp LGUI  &kp LALT  &lt 2 SPACE  &kp N5  &kp N6  &lt 3 SPACE                                &kp BSPC
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_DN C_VOL_UP>;
        };
    };
};
